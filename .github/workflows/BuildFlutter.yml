name: Flutter Build and Upload Android APK

# 触发条件：可以选择手动触发或代码提交时自动触发
on: 
  workflow_dispatch:  # 允许手动触发
  # 如果希望推送到main分支时自动触发，取消下面两行的注释
  # push:                 
  #   branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest  
    permissions:
      contents: write  # 允许工作流写入仓库内容（用于创建release）

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Java环境
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: 安装yq工具（用于读取pubspec.yaml）
        uses: mikefarah/yq@v4.42.1

      - name: 获取应用版本号
        id: get_flutter_app_version
        run: |
          VERSION=$(yq .version pubspec.yaml | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
  
      - name: 创建版本标签
        run: |
          git tag "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"

      # 创建配置文件（如果使用了模板）
      - name: 创建配置文件从模板
        run: |
          if [ -f "lib/utils/config.template.dart" ]; then
            cp lib/utils/config.template.dart lib/utils/config.dart
            # 替换占位符为CI环境中的安全值
            sed -i 's/YOUR_STABILITY_API_KEY/CI_PLACEHOLDER_KEY/g' lib/utils/config.dart
            sed -i 's/YOUR_DEEPSEEK_API_KEY/CI_PLACEHOLDER_KEY/g' lib/utils/config.dart
            echo "已从模板创建config.dart文件"
          fi

      - name: 安装Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'  # 使用稳定版Flutter

      - name: 获取Flutter依赖
        run: flutter pub get

      # 修复Kotlin版本问题（如果需要）
      - name: 更新Kotlin版本
        run: |
          if [ -f "android/gradle.properties" ]; then
            echo "ext.kotlin_version='1.9.0'" >> android/gradle.properties
          fi

      # 确保gradlew可执行
      - name: 设置gradlew可执行
        run: chmod +x android/gradlew
        
      - name: 构建APK发布版
        run: flutter build apk --release

      - name: 构建App Bundle
        run: flutter build appbundle --release

      - name: 保存APK到Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-apk
          path: build/app/outputs/flutter-apk/*.apk

      - name: 保存App Bundle到Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-appbundle
          path: build/app/outputs/bundle/release/*.aab

      - name: 创建GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/bundle/release/*.aab,build/app/outputs/flutter-apk/*.apk"
          tag: "v${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"
          name: "版本 ${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}"
          body: |
            ## EnviroMelody ${{ steps.get_flutter_app_version.outputs.TAG_VERSION }}
            
            ### 下载选项:
            - **Android APK**: 直接安装到Android设备
            - **Android App Bundle**: 用于上传到Google Play
            
            > **注意**: 此版本使用API密钥占位符构建，需要有效的API密钥才能完全运行。
